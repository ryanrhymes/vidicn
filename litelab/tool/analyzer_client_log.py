#!/usr/bin/env python
#
# This script is used to analyse the log files generated by the clients.
# The script is modified based on client_log_analyzer.py, the difference is
# bandwidth saving is also calculated.
#
# Usage: client_log_analyzer_2.py warmup_time topology_file log_files
#
# Liang Wang @ Dept. of Computer Science, University of Helsinki, Finland
# 2013.03.25
#

import re
import os
import sys
from multiprocessing import *

#sys.path.append("/cs/fs/home/lxwang/cone/Papers/lxwang/vidicn/code/litelab/router/")
#from prouter import Router

def parse_log(ifn):
    rsp = 1
    hit = 0
    hop = 0
    ret = 0

    pattern = re.compile(r"(\S+?)\t(\S+?)\t(\S+?)\t(\S+?)\t(\S+?)\t(\S+?)\t(\S+?)\t(\S+)")

    for line in open(ifn,'r'):
        print line
        d = parse_line(line, pattern)

        if not d:
            print line
        if d['typ'] == 'RSP':
            rsp += 1
            if d['hit'] == 1:
                hit += 1
            hop += d['hop']/2
        elif d['typ'] == 'RETRANS':
            ret += 1

    print "%s: hitratio:%.4f, avg.hops:%.2f, hit:%i, rsp:%i, ret:%i" % \
    (ifn, 1.0*hit/rsp, 1.0*hop/rsp, hit, rsp, ret)
    return rsp, hit, hop, ret


def parse_line(line, pattern):
    d = {}
    m = pattern.search(line)
    print m
    if m:
        m = m.groups()
        d['ts']  = float(m[0])
        d['seq'] = int(m[1])
        d['src'] = m[2]
        d['dst'] = m[3]
        d['typ'] = m[4]
        d['hit'] = int(m[5])
        d['cid'] = m[6]
        d['hop'] = int(m[7])
    return d

def parse_all(ifns):
    rsp = 0
    hit = 0
    hop = 0
    ret = 0

    p = Pool(processes=cpu_count())
    it =p.imap(parse_log, ifns)
    while True:
        try:
            rspt, hitt, hopt, rett = it.next()
            rsp += rspt
            hit += hitt
            hop += hopt
            ret += rett
        except StopIteration:
            break
    print "-"*50
    print "sys: hitratio:%.4f, avg.hops:%.2f, hit:%i, rsp:%i, ret:%i" % \
    (1.0*hit/rsp, 1.0*hop/rsp, hit, rsp, ret)

    pass

if __name__=="__main__":
    #for fname in sys.argv[1:]:
    #    parse_log(fname)

    parse_all(sys.argv[1:])

    sys.exit(0)
