#!/usr/bin/env python
#
# This script is used to analyse the log files generated by the clients.
# The script is modified based on client_log_analyzer.py, the difference is
# bandwidth saving is also calculated.
#
# Usage: client_log_analyzer_2.py warmup_time topology_file log_files
#
# Liang Wang @ Dept. of Computer Science, University of Helsinki, Finland
# 2013.03.25
#

import re
import os
import sys
from multiprocessing import *

sys.path.append('/cs/fs/home/lxwang/cone/Papers/lxwang/vidicn/code/litelab/expconf/tree16/ihandler/')
sys.path.append('/cs/fs/home/lxwang/cone/Papers/lxwang/vidicn/code/litelab/router')
from vidicn_common import *


D2SERVER = 7.0  # Hops to the server
filePopularity = prepare_file_popularity()
fileSize = prepare_filesize_distrib()
chunkPopularity = prepare_chunk_popularity_weibull()
chunkSize = prepare_chunksize_distrib(fileSize)

start = 0
period = 60

def parse_log(ifn):
    cache = set()
    ts0 = None
    pattern = re.compile(r"(\S+?)\t(\S+?)\t(\S+?)\t(\S+?)\t(\S+?)\t(\S+?)\t(\S+?)\t(\S+)\t(\S+)")
    for line in open(ifn,'r'):
        d = parse_line(line, pattern)

        if not d:
            print line
        else:
            if ts0 is None:
                ts0 = d['ts'] + start + period
        if d['ts'] <= ts0:
            if d['typ'] == "ADD":
                cache.add((d['fil'],d['chk']))
            if d['typ'] == "DEL":
                cache.remove((d['fil'],d['chk']))
    return cache


def parse_line(line, pattern):
    d = {}
    m = pattern.search(line)
    if m:
        m = m.groups()
        d['ts']  = float(m[0])
        d['seq'] = int(m[1])
        d['src'] = m[2]
        d['dst'] = m[3]
        d['typ'] = m[4]
        d['hit'] = int(m[5])
        d['fil'] = int(m[6])
        d['chk'] = int(m[7])
        d['hop'] = int(m[8])
    return d

def parse_all(ifns, ts):
    p = Pool(processes=cpu_count())
    it =p.imap(parse_log, ifns)
    cache_tot = 0
    cache_dis = set()
    while True:
        try:
            c = it.next()
            cache_tot += len(c)
            cache_dis |= c
        except StopIteration:
            break
    print start, 1.0*len(cache_dis)/cache_tot
    #print "-"*50
    pass


if __name__=="__main__":
    #for fname in sys.argv[1:]:
    #    parse_log(fname)

    for i in range(10):
        period = 30
        start = 120 + i*period
        parse_all(sys.argv[1:], start)

    sys.exit(0)
